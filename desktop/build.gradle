apply plugin: "java"
//apply plugin: "artemis"

sourceCompatibility = 1.7
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "net.mostlyoriginal.game.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../android/assets")
project.ext.weaveDir = new File("$buildDir/explodedForWeave")

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

// Prepare folder with all dependencies exploded.
task explodeForWeave(type: Sync, dependsOn: classes) {
    into project.weaveDir
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir)
}

/*
// Apply weaving on dependency folder.
weave {
    dependsOn explodeForWeave
    enableArtemisPlugin = true
    enablePooledWeaving = true
    ideFriendlyPacking = true
    optimizeEntitySystems = true
    classesDir = project.weaveDir
}

// package directory into jar.
task dist(type: Jar, dependsOn: weave) {
    from project.weaveDir
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}
*/

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}